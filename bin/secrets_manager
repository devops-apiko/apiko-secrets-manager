#!/usr/bin/env bash

run_help_text="Run \"./secrets_manager help\" for more info\n"

config_file_name=".secrets_manager_config"

function read_config {
  if [ -f $config_file_name ]; then
    set -a
    . "./${config_file_name}"
    set +a
  fi

  local config_error_text="Please, create a ${config_file_name} file or export this variable globally\n"

  if [ -z $SM_PROJECT_NAME ]; then
    printf "SM_PROJECT_NAME environment variable is required.\n${config_error_text}"
    exit 1
  fi

  if [ -z $SM_AWS_PROFILE_NAME ]; then
    printf "SM_AWS_PROFILE_NAME environment variable is required.\n${config_error_text}"
    exit 1
  fi
}

function check_requirements {
  local required_packages=($@)

  for package in ${required_packages[@]}; do
    local package_installed=$(which $package)

    if [ -z $package_installed ]; then
      echo "Package \"$package\" not found. Please install it first"
      exit 1
    fi
  done
}

function check_path_to_file {
  local path_to_file="${1}"

  if [ -z $path_to_file ]; then
    echo "File path is required. ${run_help_text}"
    exit 1
  fi

  if [ ! -f $path_to_file ]; then
    echo "Provided file doesn't exist or is not a file"
    exit 1
  fi
}

function get_encryption_key {
  local environment="${1}"

  local parameter_name="/${SM_PROJECT_NAME}/${environment}/secrets_encryption_key"
  local encryption_key=$(aws --profile $SM_AWS_PROFILE_NAME ssm get-parameter --name ${parameter_name} | jq ".Parameter.Value")

  echo $encryption_key
}

function run_help {
  printf "secrets_manager\n\n"
  printf "Command for encrypting and decrypting files using GPG program and keys, \nstored in AWS.\n"
}

function run_encrypt {
  local path_to_file="${1}"
  local environment="${2}"

  check_path_to_file $path_to_file

  local encryption_key=$(get_encryption_key $environment)

  if [ -z $encryption_key ]; then
    echo "Can't retrieve a key from AWS"
    exit 1
  fi

  gpg --batch --yes --symmetric --cipher-algo AES256 --passphrase="${encryption_key}" "${path_to_file}"
}

function run_decrypt {
  local path_to_file="${1}"
  local environment="${2}"

  check_path_to_file $path_to_file

  local encryption_key=$(get_encryption_key $environment)

  # remove .gpg from the path string
  local path_to_decrypted_file=${path_to_file%.gpg}

  if [ -z $encryption_key ]; then
    echo "Can't retrieve a key from AWS"
    exit 1
  fi

  gpg --quiet --batch --yes --decrypt \
    --passphrase="${encryption_key}" \
    --output "${path_to_decrypted_file}" \
    "${path_to_file}"
}

function run_config {
  printf "During this process we'll create a ${config_file_name} file in the current directory.\n"

  if [ -f $config_file_name ]; then
    echo "File ${config_file_name} exists. It will be overwritten. Press Enter to continue or CTRL+C to stop."
    read

    read_config

    printf "Enter a project name [$SM_PROJECT_NAME]: "
    read project_name

    project_name=$([[ -z $project_name ]] && echo $SM_PROJECT_NAME || echo $project_name)

    printf "Enter an AWS profile name [$SM_AWS_PROFILE_NAME]: "
    read aws_profile_name

    aws_profile_name=$([[ -z $aws_profile_name ]] && echo $SM_AWS_PROFILE_NAME || echo $aws_profile_name)
  else
    printf "Enter a project name: "
    read project_name

    printf "Enter an AWS profile name: "
    read aws_profile_name
  fi

  cat >$config_file_name <<EOM
SM_PROJECT_NAME=${project_name}
SM_AWS_PROFILE_NAME=${aws_profile_name}
EOM

}

function secrets_manager {
  # defining the list of the required packages
  local required_packages=("aws" "gpg")

  # checking that all required packages are installed
  check_requirements ${required_packages[@]}

  local command="${1}"
  local path_to_file="${2}"
  local environment="${3:-development}"

  if [ -z $command ]; then
    echo "Command is required. ${run_help_text}"
    exit 1
  else
    if [ $command != "config" ]; then
      read_config
    fi

    case $command in
    help)
      run_help
      ;;

    encrypt)
      run_encrypt $path_to_file $environment
      ;;

    decrypt)
      run_decrypt $path_to_file $environment
      ;;

    config)
      run_config
      ;;

    *)
      echo "Can't find command \"$command\". ${run_help_text}"
      exit 1
      ;;
    esac
  fi
}

secrets_manager $@
